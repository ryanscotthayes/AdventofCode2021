WITH CLEAN_DATA AS (
	SELECT ORDERING,
	SUBSTR(RAW_DATA,1,POSITION(' ' IN RAW_DATA)-1) AS COMMAND,
	SUBSTR(RAW_DATA,POSITION(' ' IN RAW_DATA)+1,2)*1 AS AMOUNT
	FROM AOC2021.D2_INPUT
	ORDER BY ORDERING
),

PART_1 AS (
	SELECT 
    CASE WHEN UPPER(COMMAND) = 'FORWARD' THEN AMOUNT ELSE 0 END AS HORIZONTAL_POS,
    CASE WHEN UPPER(COMMAND) = 'DOWN' THEN AMOUNT
		WHEN UPPER(COMMAND) = 'UP' THEN AMOUNT*-1
        ELSE 0 END AS VERTICAL_POS
    FROM CLEAN_DATA
),

PART_2 AS (
	SELECT *,
    CASE WHEN UPPER(COMMAND) = 'FORWARD' THEN AMOUNT ELSE 0 END AS HORIZONTAL_POS,
	CASE WHEN UPPER(COMMAND) = 'FORWARD' THEN AMOUNT * AIM
		ELSE 0 END AS VERTICAL_POS
        
    FROM (
		/*Here we roll up aim changes*/
		SELECT *,
		SUM(AIM_CHANGES) OVER (PARTITION BY '1' ORDER BY ORDERING) AS AIM
		
		FROM (
        /*Have to create Aim variable first. MySQL was very particular about each of these steps being
        in a different query, unlike Snowflake or Netezza...*/
			SELECT 
			ORDERING,
			COMMAND,
			AMOUNT,
			CASE WHEN UPPER(COMMAND) = 'DOWN' THEN AMOUNT
				WHEN UPPER(COMMAND) = 'UP' THEN AMOUNT*-1
				ELSE 0 END AS AIM_CHANGES
			FROM CLEAN_DATA
		) AS X
    ) AS Y
    
    
)

SELECT 'Part 1:' AS PART,
SUM(HORIZONTAL_POS) * SUM(VERTICAL_POS) AS ANSWER 
FROM PART_1
UNION
SELECT 'Part 2:' AS PART,
SUM(HORIZONTAL_POS) * SUM(VERTICAL_POS) AS ANSWER 
FROM PART_2
;
