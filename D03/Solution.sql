WITH INPUT_TABLE AS (
	SELECT ORDERING +1 AS ORDERING,
	TRIM(BOTH '\R' FROM RAW_DATA) AS RAW_DATA FROM AOC2021.D3_INPUT
),
CJ_TABLE AS (
	SELECT ORDERING FROM INPUT_TABLE
	WHERE LENGTH(RAW_DATA) > ORDERING
),
TALL_TBL AS (
	SELECT ORDERING,
    LINENUMBER,
    SUBSTR(RAW_DATA,LINENUMBER,1)*1 AS BIN_BIT
    FROM (
		SELECT INPUT.*, 
		CJ.ORDERING AS LINENUMBER
		FROM INPUT_TABLE AS INPUT
		CROSS JOIN CJ_TABLE AS CJ
		ORDER BY ORDERING, LINENUMBER
	) AS X
),
PART1 AS (
	SELECT GAMMA_RATE*EPSILON_RATE AS ANSWER
		FROM(
		SELECT
		CONV(BINARY(REPLACE(GROUP_CONCAT(GAMMA_BYTE),',','')), 2, 10) AS GAMMA_RATE,
		CONV(BINARY(REPLACE(GROUP_CONCAT(EPSILON_BYTE),',','')), 2, 10) AS EPSILON_RATE
		FROM(
			SELECT 
			LINENUMBER,
			CASE WHEN AVG(BIN_BIT) > .5 THEN 1 ELSE 0 END AS GAMMA_BYTE,
			CASE WHEN AVG(BIN_BIT) > .5 THEN 0 ELSE 1 END AS EPSILON_BYTE
			FROM TALL_TBL
			GROUP BY LINENUMBER
			ORDER BY LINENUMBER
		) AS X
	) AS Y
),
OXY_CO2_SETUP AS (
	SELECT ORDERING, 
    SUBSTR(RAW_DATA,1,1) AS BIT1,
    SUBSTR(RAW_DATA,2,1) AS BIT2,
    SUBSTR(RAW_DATA,3,1) AS BIT3,
    SUBSTR(RAW_DATA,4,1) AS BIT4,
    SUBSTR(RAW_DATA,5,1) AS BIT5,
    SUBSTR(RAW_DATA,6,1) AS BIT6,
    SUBSTR(RAW_DATA,7,1) AS BIT7,
    SUBSTR(RAW_DATA,8,1) AS BIT8,
    SUBSTR(RAW_DATA,9,1) AS BIT9,
    SUBSTR(RAW_DATA,10,1) AS BIT10,
    SUBSTR(RAW_DATA,11,1) AS BIT11,
    SUBSTR(RAW_DATA,12,1) AS BIT12
    
    FROM INPUT_TABLE
),
OXY AS (

	SELECT * FROM (
		SELECT ORDERING,
		BIT1,BIT2,BIT3,BIT4,BIT5,BIT6,BIT7,BIT8,BIT9,BIT10,BIT11,BIT12,
		ROUND(AVG(BIT12) OVER (PARTITION BY '1')+.01,0) AS BIT_FILTER
		FROM (
		SELECT ORDERING,
		BIT1,BIT2,BIT3,BIT4,BIT5,BIT6,BIT7,BIT8,BIT9,BIT10,BIT11,BIT12,
		ROUND(AVG(BIT11) OVER (PARTITION BY '1')+.01,0) AS BIT_FILTER
		FROM (
		SELECT ORDERING,
		BIT1,BIT2,BIT3,BIT4,BIT5,BIT6,BIT7,BIT8,BIT9,BIT10,BIT11,BIT12,
		ROUND(AVG(BIT10) OVER (PARTITION BY '1')+.01,0) AS BIT_FILTER
		FROM (
		SELECT ORDERING,
		BIT1,BIT2,BIT3,BIT4,BIT5,BIT6,BIT7,BIT8,BIT9,BIT10,BIT11,BIT12,
		ROUND(AVG(BIT9) OVER (PARTITION BY '1')+.01,0) AS BIT_FILTER
		FROM (
		SELECT ORDERING,
		BIT1,BIT2,BIT3,BIT4,BIT5,BIT6,BIT7,BIT8,BIT9,BIT10,BIT11,BIT12,
		ROUND(AVG(BIT8) OVER (PARTITION BY '1')+.01,0) AS BIT_FILTER
		FROM (
		SELECT ORDERING,
		BIT1,BIT2,BIT3,BIT4,BIT5,BIT6,BIT7,BIT8,BIT9,BIT10,BIT11,BIT12,
		ROUND(AVG(BIT7) OVER (PARTITION BY '1')+.01,0) AS BIT_FILTER
		FROM (
		SELECT ORDERING,
		BIT1,BIT2,BIT3,BIT4,BIT5,BIT6,BIT7,BIT8,BIT9,BIT10,BIT11,BIT12,
		ROUND(AVG(BIT6) OVER (PARTITION BY '1')+.01,0) AS BIT_FILTER
		FROM (
		SELECT ORDERING,
		BIT1,BIT2,BIT3,BIT4,BIT5,BIT6,BIT7,BIT8,BIT9,BIT10,BIT11,BIT12,
		ROUND(AVG(BIT5) OVER (PARTITION BY '1')+.01,0) AS BIT_FILTER
		FROM (
		SELECT ORDERING,
		BIT1,BIT2,BIT3,BIT4,BIT5,BIT6,BIT7,BIT8,BIT9,BIT10,BIT11,BIT12,
		ROUND(AVG(BIT4) OVER (PARTITION BY '1')+.01,0) AS BIT_FILTER
		FROM (
		SELECT ORDERING,
		BIT1,BIT2,BIT3,BIT4,BIT5,BIT6,BIT7,BIT8,BIT9,BIT10,BIT11,BIT12,
		ROUND(AVG(BIT3) OVER (PARTITION BY '1')+.01,0) AS BIT_FILTER
		FROM (
		SELECT ORDERING,
		BIT1,BIT2,BIT3,BIT4,BIT5,BIT6,BIT7,BIT8,BIT9,BIT10,BIT11,BIT12,
		ROUND(AVG(BIT2) OVER (PARTITION BY '1')+.01,0) AS BIT_FILTER
		FROM (
		/*INNERMOST DOES POS 1*/
		SELECT ORDERING,
		BIT1,BIT2,BIT3,BIT4,BIT5,BIT6,BIT7,BIT8,BIT9,BIT10,BIT11,BIT12,
		ROUND(AVG(BIT1) OVER (PARTITION BY '1'),0) AS BIT_FILTER
		FROM OXY_CO2_SETUP
		) AS A
		WHERE BIT_FILTER = BIT1
		) AS B
		WHERE BIT_FILTER = BIT2
		) AS C
		WHERE BIT_FILTER = BIT3
		) AS D
		WHERE BIT_FILTER = BIT4
		) AS E
		WHERE BIT_FILTER = BIT5
		) AS F
		WHERE BIT_FILTER = BIT6
		) AS G
		WHERE BIT_FILTER = BIT7
		) AS H
		WHERE BIT_FILTER = BIT8
		) AS I
		WHERE BIT_FILTER = BIT9
		) AS J
		WHERE BIT_FILTER = BIT10
		) AS K
		WHERE BIT_FILTER = BIT11
	) AS L
	WHERE BIT_FILTER = BIT12
),
CO2 AS (
	SELECT * FROM (
		SELECT BIT1,BIT2,BIT3,BIT4,BIT5,BIT6,BIT7,BIT8,BIT9,BIT10,BIT11,BIT12,
			COUNT(*) OVER (PARTITION BY '1') AS NR_LEFT,
			CASE WHEN AVG(BIT12) OVER (PARTITION BY '1') = .5 THEN 1 ELSE ROUND(AVG(BIT12) OVER (PARTITION BY '1')-.01) END AS BIT_FILTER
		FROM (
        SELECT BIT1,BIT2,BIT3,BIT4,BIT5,BIT6,BIT7,BIT8,BIT9,BIT10,BIT11,BIT12,
			COUNT(*) OVER (PARTITION BY '1') AS NR_LEFT,
			CASE WHEN AVG(BIT11) OVER (PARTITION BY '1') = .5 THEN 1 ELSE ROUND(AVG(BIT11) OVER (PARTITION BY '1')-.01) END AS BIT_FILTER
		FROM (
        SELECT BIT1,BIT2,BIT3,BIT4,BIT5,BIT6,BIT7,BIT8,BIT9,BIT10,BIT11,BIT12,
			COUNT(*) OVER (PARTITION BY '1') AS NR_LEFT,
			CASE WHEN AVG(BIT10) OVER (PARTITION BY '1') = .5 THEN 1 ELSE ROUND(AVG(BIT10) OVER (PARTITION BY '1')-.01) END AS BIT_FILTER
		FROM (
        SELECT BIT1,BIT2,BIT3,BIT4,BIT5,BIT6,BIT7,BIT8,BIT9,BIT10,BIT11,BIT12,
			COUNT(*) OVER (PARTITION BY '1') AS NR_LEFT,
			CASE WHEN AVG(BIT9) OVER (PARTITION BY '1') = .5 THEN 1 ELSE ROUND(AVG(BIT9) OVER (PARTITION BY '1')-.01) END AS BIT_FILTER
		FROM (
        SELECT BIT1,BIT2,BIT3,BIT4,BIT5,BIT6,BIT7,BIT8,BIT9,BIT10,BIT11,BIT12,
			COUNT(*) OVER (PARTITION BY '1') AS NR_LEFT,
			CASE WHEN AVG(BIT8) OVER (PARTITION BY '1') = .5 THEN 1 ELSE ROUND(AVG(BIT8) OVER (PARTITION BY '1')-.01) END AS BIT_FILTER
		FROM (
        SELECT BIT1,BIT2,BIT3,BIT4,BIT5,BIT6,BIT7,BIT8,BIT9,BIT10,BIT11,BIT12,
			COUNT(*) OVER (PARTITION BY '1') AS NR_LEFT,
			CASE WHEN AVG(BIT7) OVER (PARTITION BY '1') = .5 THEN 1 ELSE ROUND(AVG(BIT7) OVER (PARTITION BY '1')-.01) END AS BIT_FILTER
		FROM (
        SELECT BIT1,BIT2,BIT3,BIT4,BIT5,BIT6,BIT7,BIT8,BIT9,BIT10,BIT11,BIT12,
			COUNT(*) OVER (PARTITION BY '1') AS NR_LEFT,
			CASE WHEN AVG(BIT6) OVER (PARTITION BY '1') = .5 THEN 1 ELSE ROUND(AVG(BIT6) OVER (PARTITION BY '1')-.01) END AS BIT_FILTER
		FROM (
        SELECT BIT1,BIT2,BIT3,BIT4,BIT5,BIT6,BIT7,BIT8,BIT9,BIT10,BIT11,BIT12,
			COUNT(*) OVER (PARTITION BY '1') AS NR_LEFT,
			CASE WHEN AVG(BIT5) OVER (PARTITION BY '1') = .5 THEN 1 ELSE ROUND(AVG(BIT5) OVER (PARTITION BY '1')-.01) END AS BIT_FILTER
		FROM (
        SELECT BIT1,BIT2,BIT3,BIT4,BIT5,BIT6,BIT7,BIT8,BIT9,BIT10,BIT11,BIT12,
			COUNT(*) OVER (PARTITION BY '1') AS NR_LEFT,
			CASE WHEN AVG(BIT4) OVER (PARTITION BY '1') = .5 THEN 1 ELSE ROUND(AVG(BIT4) OVER (PARTITION BY '1')-.01) END AS BIT_FILTER
		FROM (
		SELECT BIT1,BIT2,BIT3,BIT4,BIT5,BIT6,BIT7,BIT8,BIT9,BIT10,BIT11,BIT12,
			COUNT(*) OVER (PARTITION BY '1') AS NR_LEFT,
			CASE WHEN AVG(BIT3) OVER (PARTITION BY '1') = .5 THEN 1 ELSE ROUND(AVG(BIT3) OVER (PARTITION BY '1')-.01) END AS BIT_FILTER
		FROM (
		SELECT BIT1,BIT2,BIT3,BIT4,BIT5,BIT6,BIT7,BIT8,BIT9,BIT10,BIT11,BIT12,
			COUNT(*) OVER (PARTITION BY '1') AS NR_LEFT,
			CASE WHEN AVG(BIT2) OVER (PARTITION BY '1') = .5 THEN 1 ELSE ROUND(AVG(BIT2) OVER (PARTITION BY '1')-.01) END AS BIT_FILTER
		FROM (
			SELECT BIT1,BIT2,BIT3,BIT4,BIT5,BIT6,BIT7,BIT8,BIT9,BIT10,BIT11,BIT12,
			COUNT(*) OVER (PARTITION BY '1') AS NR_LEFT,
            CASE WHEN AVG(BIT1) OVER (PARTITION BY '1') = .5 THEN 1 ELSE ROUND(AVG(BIT1) OVER (PARTITION BY '1')-.01) END AS BIT_FILTER
			FROM OXY_CO2_SETUP
		) AS A WHERE (BIT_FILTER <> BIT1) OR (NR_LEFT = 1)
        ) AS B WHERE (BIT_FILTER <> BIT2) OR (NR_LEFT = 1)
		) AS C WHERE (BIT_FILTER <> BIT3) OR (NR_LEFT = 1)
        ) AS D WHERE (BIT_FILTER <> BIT4) OR (NR_LEFT = 1)
        ) AS E WHERE (BIT_FILTER <> BIT5) OR (NR_LEFT = 1)
		) AS F WHERE (BIT_FILTER <> BIT6) OR (NR_LEFT = 1)
        ) AS G WHERE (BIT_FILTER <> BIT7) OR (NR_LEFT = 1)
        ) AS H WHERE (BIT_FILTER <> BIT8) OR (NR_LEFT = 1)
        ) AS I WHERE (BIT_FILTER <> BIT9) OR (NR_LEFT = 1)
        ) AS J WHERE (BIT_FILTER <> BIT10) OR (NR_LEFT = 1)
        ) AS K WHERE (BIT_FILTER <> BIT11) OR (NR_LEFT = 1)
        ) AS L WHERE (BIT_FILTER <> BIT12) OR (NR_LEFT = 1)
        
),

PART2 AS (
	SELECT CONV(BINARY(OXY_BITS),2,10) * CONV(BINARY(CO2_BITS),2,10) AS ANSWER
	FROM(
		SELECT CONCAT(O.BIT1,O.BIT2,O.BIT3,O.BIT4,O.BIT5,O.BIT6,O.BIT7,O.BIT8,O.BIT9,O.BIT10,O.BIT11,O.BIT12) AS OXY_BITS,
		CONCAT(C.BIT1,C.BIT2,C.BIT3,C.BIT4,C.BIT5,C.BIT6,C.BIT7,C.BIT8,C.BIT9,C.BIT10,C.BIT11,C.BIT12)  AS CO2_BITS
		FROM OXY AS O
		CROSS JOIN CO2 AS C
	) AS X
)

SELECT 'PART1' AS PART, PT1.ANSWER FROM PART1 AS PT1
UNION
SELECT 'PART2' AS PART, PT2.ANSWER FROM PART2 AS PT2
;
